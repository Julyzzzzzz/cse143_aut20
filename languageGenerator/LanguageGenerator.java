// July Zhou
// Section: AH
// This LanguageGenerator.java implements a LanguageGenerator class that could
// generate possible English sentences by following certain grammar rules.

import java.util.*;
import java.util.function.*;

public class LanguageGenerator {
    private Grammar grammar;
    private Random random;

    // constructs a new LanguageGenerator with the given input grammar
    public LanguageGenerator(Grammar grammar) {
        this(grammar, new Random());
    }

    // constructs a new LanguageGenerator with the given input grammar
    // and source of randomness
    public LanguageGenerator(Grammar grammar, Random random) {
        this.grammar = grammar;
        this.random = random;
    }

    // returns a string generated by following the grammar for the input targeted string.
    // the output string will have no leading or trailing spaces and there should be exactly
    // one space between each individual word.
    public String generate(String target) {
        Map<String, String[]> grammarMap = grammar.productionRules.get();   
        String [] terms = target.split(" ");
        for (int i = 0; i < terms.length; i++) {
            if (grammarMap.containsKey(terms[i])) {
                String[] terminals = grammarMap.get(terms[i]);
                String symbol = terminals[random.nextInt(terminals.length)];
                terms[i] = generate(symbol);
            }
        }
        return String.join(" ", terms);
    }

    public enum Grammar {
        FORMULA(() -> {
            Map<String, String[]> result = new TreeMap<>();
            result.put("E", "T, E OP T".split(", "));
            result.put("T", "x, y, 1, 2, 3, ( E ), F1 ( E ), - T, F2 ( E . E )".split(", "));
            result.put("OP", "+, -, *, %, /".split(", "));
            result.put("F1", "sin, cos, tan, sqrt, abs".split(", "));
            result.put("F2", "max, min, pow".split(", "));
            return result;
        }),
        MUSIC(() -> {
            Map<String, String[]> result = new TreeMap<>();
            result.put("measure", "pitch-w, half half".split(", "));
            result.put("half", "pitch-h, quarter quarter".split(", "));
            result.put("quarter", "pitch-q, pitch pitch".split(", "));
            result.put("pitch", "C, D#, F, F#, G, A#, C6".split(", "));
            result.put("chordmeasure", "chord-w, halfchord halfchord".split(", "));
            result.put("halfchord", "chord-h, chord-q chord-q".split(", "));
            result.put("chord", "Cmin, Cmin7, Fdom7, Gdom7".split(", "));
            result.put("bassdrum", "O..o, O..., O..o, OO..".split(", "));
            result.put("snare", "..S., S..s, .S.S".split(", "));
            result.put("crash", "...*, *...".split(", "));
            result.put("claps", "x..x, xx..x".split(", "));
            return result;
        }),
        ENGLISH(() -> {
            Map<String, String[]> result = new TreeMap<>();
            result.put("SENTENCE", "NOUNP VERBP".split(", "));
            result.put("NOUNP", "DET ADJS NOUN, PROPNOUN".split(", "));
            result.put("PROPNOUN", "Seattle, Matisse, Kim, Zela, Nia, Remi, Alonzo".split(", "));
            result.put("ADJS", "ADJ, ADJ ADJS".split(", "));
            result.put("ADJ", "fluffy, bright, colorful, beautiful, purple, calming".split(", "));
            result.put("DET", "the, a".split(", "));
            result.put("NOUN", "cat, dog, bagel, apple, person, school, car, train".split(", "));
            result.put("VERBP", "TRANSVERB NOUNP, INTRANSVERB".split(", "));
            result.put("TRANSVERB", "ate, followed, drove, smacked, embraced, helped".split(", "));
            result.put("INTRANSVERB", "shined, smiled, laughed, sneezed, snorted".split(", "));
            return result;
        });

        public final Supplier<Map<String, String[]>> productionRules;

        private Grammar(Supplier<Map<String, String[]>> productionRules) {
            this.productionRules = productionRules;
        }
    }

    public static void main(String[] args) {
        //LanguageGenerator generator = new LanguageGenerator(Grammar.FORMULA);
        LanguageGenerator generator = new LanguageGenerator(Grammar.ENGLISH, new Random());
        System.out.println(generator.generate("This person TRANSVERB PROPNOUN"));
    }
}
